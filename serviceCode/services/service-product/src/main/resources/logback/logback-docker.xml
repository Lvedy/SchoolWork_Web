<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>
    <!--    &lt;!&ndash; 定义日志的根目录 &ndash;&gt;-->
    <!--    <property name="LOG_HOME" value="logs"/>-->
    <!--    &lt;!&ndash; 定义日志文件名称 &ndash;&gt;-->
    <!--    <property name="appName" value="app"></property>-->
<!--    <property name="LOG_HOME" value="/home/app/logs" />-->
<!--    <property name="LOG_HOME" source="/home/rhycDir/logs"/>-->
    <springProperty scope="context" name="appName" source="log.name"/>
    <springProperty scope="context" name="LOG_HOME" source="log.path"/>

    <appender name="ALL"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/${appName}_all.log</file>
        <!-- 过滤器，只记录ERROR,DEBUG级别的日志 -->

        <!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
        <!--            <level>DEBUG</level>-->
        <!--            <onMatch>ACCEPT</onMatch>-->
        <!--            <onMismatch>DENY</onMismatch>-->
        <!--        </filter>-->
        <!--        上述配置表示按照固定窗口模式生成日志文件，当文件大于500MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。   　　　　　-->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            　　　　　　　　　　
            <fileNamePattern>${LOG_HOME}/${appName}_all-%i.log</fileNamePattern>
            　　　　　　　　　　
            <minIndex>1</minIndex>
            　　　　　　　　　　
            <maxIndex>1</maxIndex>
            　　　　　　
        </rollingPolicy>
        　　　　　　
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            　　　　　　　　　　
            <maxFileSize>1000MB</maxFileSize>
            　　　　　　
        </triggeringPolicy>


        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="ERROR"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/${appName}_error.log</file>
        <!-- 过滤器，只记录ERROR,DEBUG级别的日志 -->

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
        <!--            <level>DEBUG</level>-->
        <!--            <onMatch>ACCEPT</onMatch>-->
        <!--            <onMismatch>DENY</onMismatch>-->
        <!--        </filter>-->
        <!--        上述配置表示按照固定窗口模式生成日志文件，当文件大于500MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。   　　　　　-->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            　　　　　　　　　　
            <fileNamePattern>${LOG_HOME}/${appName}_error-%i.log</fileNamePattern>
            　　　　　　　　　　
            <minIndex>1</minIndex>
            　　　　　　　　　　
            <maxIndex>1</maxIndex>
            　　　　　　
        </rollingPolicy>
        　　　　　　
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            　　　　　　　　　　
            <maxFileSize>1000MB</maxFileSize>
            　　　　　　
        </triggeringPolicy>


        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--
        日志输出格式：
            %d表示日期时间，
            %thread表示线程名，
            %-5level：级别从左显示5个字符宽度
            %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 
            %msg：日志消息，
            %n是换行符
        -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </layout>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称 -->
        <file>${LOG_HOME}/${appName}.log</file>
        <!--
        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            -->
            <MaxHistory>30</MaxHistory>
            <MaxFileSize>500MB</MaxFileSize>
        </rollingPolicy>
        <!-- 日志输出格式： -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
        </layout>
    </appender>

    <!-- 
        logger主要用于存放日志对象，也可以定义日志类型、级别
        name：表示匹配的logger类型前缀，也就是包的前半部分
        level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
        additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
        false：表示只用当前logger的appender-ref，
        true：表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
    <!--
        logger是记录Logger对象输出的日志级别的
        　　sercvice实现类引入日志对象可以查看方法的报错信息以及打印sql语句，public static final Logger logger = LoggerFactory.getLogger(SysUserServiceImpl.class);
   　　　生产环境：
　　　　　　　一般把level设为error，可以记录错误的日志信息，毕竟主要是要记录错误信息进行错误定位。
　　　　　开发环境：
　　　　　　　类中引入了logger日志对象时，level级别用info,debug都可以，都有错误信息输出。
　　 -->


    <!-- hibernate logger -->
    <logger name="com.gemo.business.service" level="debug" additivity="false">
        <appender-ref ref="ALL"/>
        <appender-ref ref="appLogAppender"/>
        <appender-ref ref="CONSOLE"/>
    </logger>


    <logger name="org.springframework" level="info" additivity="false"></logger>
    <logger name="springfox.documentation.swagger2" level="off"/>
    <logger name="io.swagger.models.parameters" level="off"/>
    <logger name="springfox.documentation.spring.web.readers.operation" level="off"/>
    <!--    一般用默认的info就可以-->

    <!--
root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
-->
    <root level="info">
        <!-- 控制台输出日志-->
        <appender-ref ref="CONSOLE"/>
        <!--        <appender-ref ref="stdout"/>-->
        <!--
        开发环境：
            不需要往文件记录日志，可以把这个appender-ref ref="appLogAppender"注释，上面那个往文件写日志的appender也要注释,不然每天都产生一个空文件；
        生产环境：
            需要往文件记录日志，此时appender-ref ref="appLogAppender"就不能注释了，不然没日志记录到文件，上面那个往文件写日志的appender也要放开。
         -->
        <appender-ref ref="appLogAppender"/>
        <appender-ref ref="ERROR"/>
        <appender-ref ref="ALL"/>
    </root>
</configuration>